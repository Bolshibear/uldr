from grid import *
import time
import os
import sys


def problem(size, start, end, specials):
    '''
    Builds a new grid and prints the intro and the grid. It takes user input
    and checks for 'quit' or 'close' flags. It runs it through grid.run() and 
    prints congratulations If correct or try again if incorrect. It will 
    ask for a new prompt and rerun it until correct.'''
    
    grid = Grid(size, start, end, specials)
    print(grid.intro())
    print(grid)
    
    prompt = str(input('\n> '))
    
    if prompt[0:4] == 'quit' or prompt[0:5] == 'close':
        return 'quit'
    
    answer = grid.run(prompt)
    grid.reset()
    
    while answer[0] == False:
        print('\nBad luck. Try again')
        prompt = input('\n> ')
        
        if prompt[0:4] == 'quit' or prompt[0:5] == 'close':
                return 'quit'
            
        answer = grid.run(prompt)  
        grid.reset()
        
    print('\nCongratulations, you made it!\n')
        
    
def level_generator():
    '''
    Currently Just returns test size, start, end and specials
    
    TO DO: Implement randomized level maker. It should check if the random
    problem is solvable first'''
    
    size = (4,3)
    start = (0,0)
    end = (2,3)
    
    specials = [((0,1), ['fail'],()), 
                ((2,1), ['comp'],()),
                ((2,0), ['fail'],()),
                ((1,2), ['tele'],(0,2))
                ]    
    
    return [size, start, end, specials]


def level_test():
    '''
    Currently Just returns test size, start, end and specials
    
    TO DO: Implement randomized level maker. It should check if the random
    problem is solvable first'''
    
    size = (8, 3)
    start = (0,0)
    end = (2,7)
    
    specials = [((0,7), ['fail'],()), 
                ((1,1), ['fail'],()),
                ((0,2), ['fail'],()),
                ((1,6), ['comp'],()),
                ((2,2), ['tele'],(1,7))
                ]    
    
    return [size, start, end, specials]

def clear_page():
    '''
    Checks if uldr is being run in a terminal of ide. If terminal It clears
    the terminal with op.system('clear')'''
    
    if sys.stdin.isatty():
        os.system('clear')


    
    
def uldr():
    '''
    Ulder master function. Runs a loop of levels generated by level_generator().
    Prints level banner and checks fior 'quit' or 'close' flag. Sleeps for .7s
    after every level and runs clear_page().'''
    
    clear_page()
    
    for i in range(1, 11):
        print('\n---------------- Level {} ----------------\n'.format(i))
        level = level_test()
        
        frage = problem(level[0], level[1], level[2], level[3])
        
        if frage == 'quit':
            clear_page()
            break
        
        time.sleep(1)
        clear_page()
      

uldr()